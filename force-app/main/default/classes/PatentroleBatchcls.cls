public class PatentroleBatchcls implements Database.Batchable<sObject>{
    //updatePermissionFields
     public Set<id> Patids;
    public string context;
    public PatentroleBatchcls(set<id> patentIds,string context){
        Patids=patentIds;
        context=context;
    }
    public PatentroleBatchcls(){}
     public Database.QueryLocator start(Database.BatchableContext BC) {
         system.debug(Patids);
     return Database.getQueryLocator([select id,Patent__c,Person__c,role__C,Law_Firm__c from Patent_Role__c where id in:Patids ]);
     }
    public void execute(Database.BatchableContext BC, List<Patent_Role__c  > scope) {
        if(context!='Delete')
          PatentRoleTriggerHelper.updaterolesinpatentflow(scope);
        PatentRoleTriggerHelper.updatePermissionFields(scope);
         PatentRoleTriggerHelper.updatePatentrolepersonfield(scope);
         Set<id> patids= new Set<id>();
        for(Patent_Role__c  Pat:scope){
            patids.add(Pat.Patent__c);
        }
        PatentRoleTriggerHelper.shareRecordsBasedOnRoles(patids);
    }
    public void finish(Database.BatchableContext BC) {
         integer i=0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}