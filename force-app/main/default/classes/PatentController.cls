public with sharing class PatentController {

    @AuraEnabled
    public static void manuallyPurgeDocuments(Id recordId) {
        PatentService.deleteDraftDocuments(recordId);
    }

    @AuraEnabled
    public static List<SymphonyIPM__Patent__c> getPatentsById(Id patentId) {
        return PatentService.getPatentsById(patentId);
    }

    @InvocableMethod(Label='Get family patents' Description='Returns the list of related family patents')
    public static void getRelatedPatents(List<Requests> docketNumber) {
        String familyId = docketNumber[0].docketNumber.substring(2, 6);

        List<SymphonyIPM__Patent__c> patents = [SELECT Id FROM SymphonyIPM__Patent__c WHERE SymphonyIPM__Family_ID__c = :familyId];
        for (SymphonyIPM__Patent__c patent : patents) {
            patent.Show_16_GAEI_message__c = true;
        }

        Database.update(patents);
    }

    @AuraEnabled
    public static Boolean checkIsPatentPCTorPriority(Id patentId) {
        SymphonyIPM__Patent__c patent = [SELECT Id, SymphonyIPM__Case_Type__c, SymphonyIPM__Country__r.SymphonyIPM__Country_Code__c FROM SymphonyIPM__Patent__c WHERE Id = :patentId];
        return patent.SymphonyIPM__Country__r.SymphonyIPM__Country_Code__c == 'WO'
                || patent.SymphonyIPM__Case_Type__c == 'Utility Original'
                || patent.SymphonyIPM__Case_Type__c == 'Utility Non-Provisional'
                || patent.SymphonyIPM__Case_Type__c == 'Primary';
    }

    @AuraEnabled
    public static List<ComboBoxOptionWrapper> searchPatents(String searchWord, Id docketingActivityId) {
        List<ComboBoxOptionWrapper> objOptions = new List<ComboBoxOptionWrapper>();
        searchWord = searchWord + '%';
        if (Schema.SObjectType.SymphonyIPM__Patent__c.isAccessible() && SymphonyIPM__Patent__c.SObjectType.getDescribe().isAccessible()) {
            SymphonyIPM__Docketing_Activity_v2__c docketing = [SELECT Id, Invention_Disclosure__r.Name FROM SymphonyIPM__Docketing_Activity_v2__c WHERE Id = :docketingActivityId];
            String familyId = docketing.Invention_Disclosure__r.Name.substring(2, 6);
            String docketNumber = '%' + familyId + '%';

            List<SymphonyIPM__Patent__c> patents = [SELECT Id, Name, SymphonyIPM__Title_of_Invention__c FROM SymphonyIPM__Patent__c WHERE (SymphonyIPM__Family_ID__c = :familyId OR Name LIKE :docketNumber) AND (Name LIKE :searchWord OR SymphonyIPM__Title_of_Invention__c LIKE :searchWord)];
            for (SymphonyIPM__Patent__c objInventors : patents) {
                ComboBoxOptionWrapper objOption = new ComboBoxOptionWrapper();
                if (objInventors.SymphonyIPM__Title_of_Invention__c != null) {
                    objOption.label = objInventors.Name + ' (' + objInventors.SymphonyIPM__Title_of_Invention__c + ')';
                } else {
                    objOption.label = objInventors.Name;
                }
                objOption.value = objInventors.Id;
                objOptions.add(objOption);
            }
        }
        return objOptions;
    }

    @AuraEnabled
    public static List<Id> getUsedPatentsIds(Id patentId) {
        List<Id> usedIds = new List<Id> ();

        for (Related_Patent__c patent : [SELECT ChildPatent__c, PatentParent__c FROM Related_Patent__c WHERE ChildPatent__c = :patentId OR PatentParent__c = :patentId]) {
            if (patent.PatentParent__c == patentId) {
                usedIds.add(patent.ChildPatent__c);
            } else {
                usedIds.add(patent.PatentParent__c);
            }

        }
        return usedIds;
    }

    @AuraEnabled
    public static List<ComboBoxOptionWrapper> searchPatents(String searchWord, List<Id> usedPatentsIds) {
        List<ComboBoxOptionWrapper> objOptions = new List<ComboBoxOptionWrapper>();
        searchWord = searchWord + '%';
        if (Schema.SObjectType.SymphonyIPM__Patent__c.isAccessible() && SymphonyIPM__Patent__c.SObjectType.getDescribe().isAccessible()) {
            List<SymphonyIPM__Patent__c> patents = [SELECT Id, Name, SymphonyIPM__Title_of_Invention__c FROM SymphonyIPM__Patent__c WHERE (Name LIKE :searchWord OR SymphonyIPM__Title_of_Invention__c LIKE :searchWord) AND Id NOT IN :usedPatentsIds LIMIT 25];
            for (SymphonyIPM__Patent__c objInventors : patents) {
                ComboBoxOptionWrapper objOption = new ComboBoxOptionWrapper();
                if (objInventors.SymphonyIPM__Title_of_Invention__c != null) {
                    objOption.label = objInventors.Name + ' (' + objInventors.SymphonyIPM__Title_of_Invention__c + ')';
                } else {
                    objOption.label = objInventors.Name;
                }
                objOption.value = objInventors.Id;
                objOption.selected = false;
                objOptions.add(objOption);
            }
        }
        return objOptions;
    }

    @AuraEnabled
    public static Boolean updatePatentConnection(Id patentId, Id selectedId) {
        if (patentId != null && selectedId != null) {
            Related_Patent__c relatedPatents = new Related_Patent__c(ChildPatent__c = selectedId, PatentParent__c = patentId);
            insert relatedPatents;
        }
        return patentId != null && selectedId != null;
    }

    @AuraEnabled
    public static Boolean deleteConnection(Id patentId, Id selectedId) {
        if (patentId != null && selectedId != null) {
            List<Related_Patent__c> patents = [SELECT Id FROM Related_Patent__c WHERE ChildPatent__c =: selectedId AND PatentParent__c = :patentId];
            if (!patents.isEmpty()) {
                delete patents;
            }
        }
        return patentId != null && selectedId != null;
    }

    public class Requests {
        @InvocableVariable
        public String docketNumber;
    }
public static void magicMethod(){
Integer i = 0;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;

}
}