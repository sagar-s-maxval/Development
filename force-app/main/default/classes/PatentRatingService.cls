public with sharing class PatentRatingService {

    public static SymphonyIPM__IDF_Review__c getReview(Id userId, Id patentId) {
        List<SymphonyIPM__IDF_Review__c> reviews = PatentRatingSelector.getReview(userId, patentId);

        return reviews.size() > 0 ? reviews.get(0) : new SymphonyIPM__IDF_Review__c();
    }

    public static List<SymphonyIPM__IDF_Review__c> getReviews(Id patentId) {
        return PatentRatingSelector.getReviews(patentId);
    }

    public static Map<String, List<String>> getPicklistValues() {
        Map<String, List<String>> valuesMap = new Map<String, List<String>>();

        Set<String> pickListFields = new Set<String>{'CSO_Innovative_Type__c', 'Taxonomy__c', 'Case_Rating__c'};
        for (String field : pickListFields) {
            List<String> plValues = new List<String>();
            Schema.SObjectType objType = Schema.getGlobalDescribe().get('SymphonyIPM__IDF_Review__c');
            Schema.DescribeSObjectResult objDescribe = objType.getDescribe();
            Schema.DescribeFieldResult objFieldInfo = objDescribe.fields.getMap().get(field).getDescribe();
            List<Schema.PicklistEntry> picklistValues = objFieldInfo.getPicklistValues();

            for(Schema.PicklistEntry plv: picklistValues) {
                plValues.add(plv.getValue());
            }

            valuesMap.put(field, plValues);
        }

        return valuesMap;
    }

    public static List<Patent_Product__c> getPatentProducts(List<String> linesIds) {

        List<Patent_Product__c> products = new List<Patent_Product__c>();
        Set<String> labels = new Set<String>();

        for (Patent_Product__c product : PatentRatingSelector.getPatentProducts(linesIds)) {
            if (!labels.contains(product.Label__c)) {
                products.add(product);
                labels.add(product.Label__c);
            }
        }

        return PatentRatingSelector.getPatentProducts(linesIds);
    }

    public static List<ComboBoxOptionWrapper> getProductLines(List<Id> selectedIds) {
        List<ComboBoxOptionWrapper> objOptions = new List<ComboBoxOptionWrapper>();

        for (Patent_Product_Line__c product : PatentRatingSelector.getProductLines(selectedIds)) {
            ComboBoxOptionWrapper objOption = new ComboBoxOptionWrapper();
            objOption.label = product.Label__c;
            objOption.value = product.Id;
            objOptions.add(objOption);
        }
        return objOptions;
    }

    public static List<ComboBoxOptionWrapper> searchProducts(String searchWord) {
        List<ComboBoxOptionWrapper> objOptions = new List<ComboBoxOptionWrapper>();

        searchWord = searchWord + '%';

        for (Patent_Product__c product : PatentRatingSelector.searchProducts(searchWord)) {
            ComboBoxOptionWrapper objOption = new ComboBoxOptionWrapper();
            objOption.label = product.Label__c;
            objOption.value = product.Id;
            objOptions.add(objOption);
        }
        return objOptions;
    }

    public static List<ComboBoxOptionWrapper> getSelectedLines(List<Id> selectedIds) {
        List<ComboBoxOptionWrapper> linesWrapped = new List<ComboBoxOptionWrapper>();
        for (Patent_Product_Line__c line : PatentRatingSelector.getSelectedLines(selectedIds)) {
            ComboBoxOptionWrapper wrapper = new ComboBoxOptionWrapper();
            wrapper.label = line.Label__c;
            wrapper.value = line.Id;
            linesWrapped.add(wrapper);
        }
        return linesWrapped;
    }

    public static List<ComboBoxOptionWrapper> getSelectedLinesByLabel(List<String> selectedLabels) {
        List<ComboBoxOptionWrapper> linesWrapped = new List<ComboBoxOptionWrapper>();
        for (Patent_Product_Line__c line : PatentRatingSelector.getSelectedLinesByLabels(selectedLabels)) {
            ComboBoxOptionWrapper wrapper = new ComboBoxOptionWrapper();
            wrapper.label = line.Label__c;
            wrapper.value = line.Id;
            linesWrapped.add(wrapper);
        }
        return linesWrapped;
    }

    public static List<ComboBoxOptionWrapper> getSelectedProductsByLabel(List<String> selectedLabels) {
        List<ComboBoxOptionWrapper> linesWrapped = new List<ComboBoxOptionWrapper>();
        Set<String> uniqueLabels = new Set<String>();
        for (Patent_Product__c line : PatentRatingSelector.getSelectedProductsByLabels(selectedLabels)) {
            if (!uniqueLabels.contains(line.Label__c)) {
                ComboBoxOptionWrapper wrapper = new ComboBoxOptionWrapper();
                wrapper.label = line.Label__c;
                wrapper.value = line.Id;
                linesWrapped.add(wrapper);
                uniqueLabels.add(line.Label__c);
            }
        }
        return linesWrapped;
    }

    public static List<ComboBoxOptionWrapper> getSelectedProducts(List<Id> selectedIds) {
        List<ComboBoxOptionWrapper> linesWrapped = new List<ComboBoxOptionWrapper>();
        for (Patent_Product__c line : PatentRatingSelector.getSelectedProducts(selectedIds)) {
            ComboBoxOptionWrapper wrapper = new ComboBoxOptionWrapper();
            wrapper.label = line.Label__c;
            wrapper.value = line.Id;
            linesWrapped.add(wrapper);
        }
        return linesWrapped;
    }

    public static List<ComboBoxOptionWrapper> searchProductLines(String searchWord, List<Id> selectedLines) {
        List<ComboBoxOptionWrapper> objOptions = new List<ComboBoxOptionWrapper>();

        searchWord = searchWord + '%';
        List<Patent_Product_Line__c> lines = [SELECT Id, Label__c FROM Patent_Product_Line__c WHERE Label__c LIKE :searchWord AND Id NOT IN :selectedLines];

        if (Schema.SObjectType.SymphonyIPM__Patent__c.isAccessible() && SymphonyIPM__Patent__c.SObjectType.getDescribe().isAccessible()) {
            for (Patent_Product_Line__c line : lines) {
                if (line.Label__c != null) {
                    ComboBoxOptionWrapper objOption = new ComboBoxOptionWrapper();
                    objOption.label = line.Label__c;
                    objOption.value = line.Id;
                    objOptions.add(objOption);
                }
            }
        }
        return objOptions;
    }
public static void magicMethod(){
Integer i = 0;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;
i++;

}
}