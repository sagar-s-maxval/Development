public with sharing class AdditionalInventorTriggerHelper {

    public static void populateinventors(List<SymphonyIPM__Additional_Inventor__c> additionalInventors){
         Set<Id> IdfIds = new Set<Id>();
        for (SymphonyIPM__Additional_Inventor__c idInventor : additionalInventors) {
            IdfIds.add(idInventor.SymphonyIPM__Invention_Disclosure_New__c);
        }
        Map<id,string>invmap = new Map<id,string>();
        if(IdfIds.size()>0){
            for(SymphonyIPM__Additional_Inventor__c inv:[select id,SymphonyIPM__Inventor_Name__c,SymphonyIPM__Invention_Disclosure_New__c from
            SymphonyIPM__Additional_Inventor__c where SymphonyIPM__Invention_Disclosure_New__c in:IdfIds]){
                 string invname='';
                if(invmap.containskey(inv.SymphonyIPM__Invention_Disclosure_New__c))
                     invname=invmap.get(inv.SymphonyIPM__Invention_Disclosure_New__c)+','+inv.SymphonyIPM__Inventor_Name__c;
                else
                   invname=inv.SymphonyIPM__Inventor_Name__c;
               invmap.put(inv.SymphonyIPM__Invention_Disclosure_New__c,invname);
            }
        }
        list<SymphonyIPM__Invention_Disclosure_New__c> updateidf= new list<SymphonyIPM__Invention_Disclosure_New__c>();
        if(invmap.size()>0){
            for(SymphonyIPM__Invention_Disclosure_New__c inv:[select id,SymphonyIPM__Inventors__c from  SymphonyIPM__Invention_Disclosure_New__c where id in:invmap.keyset()]){
                   inv.SymphonyIPM__Inventors__c=invmap.get(inv.id);                                  
                                   updateidf.add(inv); }
         }
        if(updateidf.size()>0)
            update updateidf;
    }
    
    public static void beforeHandler(List<SymphonyIPM__Additional_Inventor__c> additionalInventors, Map<Id, SymphonyIPM__Additional_Inventor__c> oldMap) {
        checkRemuneration(additionalInventors);
        validatePrimaryInventor(additionalInventors, oldMap);
    }

    private static void checkRemuneration(List<SymphonyIPM__Additional_Inventor__c> additionalInventors) {
        Set<Id> personsIds = new Set<Id>();
        for (SymphonyIPM__Additional_Inventor__c idInventor : additionalInventors) {
            personsIds.add(idInventor.SymphonyIPM__Inventor__c);
        }

        Map<String, Boolean> countries = new Map<String, Boolean>();
        for (SymphonyIPM__Country__c country : [SELECT Name, Is_Remuneration_Applicable__c FROM SymphonyIPM__Country__c]) {
            countries.put(country.Name, country.Is_Remuneration_Applicable__c);
        }

        Map<Id, SymphonyIPM__Inventor__c> inventors = new Map<Id, SymphonyIPM__Inventor__c>([SELECT Id, SymphonyIPM__Location__c, SymphonyIPM__Email__c FROM SymphonyIPM__Inventor__c WHERE Id IN :personsIds]);

        for (SymphonyIPM__Additional_Inventor__c inventor : additionalInventors) {
            Boolean isApplicable = countries.get(inventors.get(inventor.SymphonyIPM__Inventor__c)?.SymphonyIPM__Location__c);
            inventor.Is_Contribution_Applicable__c = isApplicable == null ? false : isApplicable;
            inventor.SymphonyIPM__Inventor_Email__c = inventors.get(inventor.SymphonyIPM__Inventor__c)?.SymphonyIPM__Email__c;
        }
    }

    private static void validatePrimaryInventor(List<SymphonyIPM__Additional_Inventor__c> additionalInventors, Map<Id, SymphonyIPM__Additional_Inventor__c> oldMap) {
        Set<Id> idfs = new Set<Id>();

        for (SymphonyIPM__Additional_Inventor__c idInventor : additionalInventors) {
            idfs.add(idInventor.SymphonyIPM__Invention_Disclosure_New__c);
        }

        Set<Id> idfsWithPrimaryInventor = new Set<Id>();
        for (SymphonyIPM__Additional_Inventor__c idInventor : [SELECT Id, SymphonyIPM__Invention_Disclosure_New__c FROM SymphonyIPM__Additional_Inventor__c WHERE SymphonyIPM__Invention_Disclosure_New__c IN :idfs AND First_Named_Inventor__c = TRUE]) {
            idfsWithPrimaryInventor.add(idInventor.SymphonyIPM__Invention_Disclosure_New__c);
        }

        for (SymphonyIPM__Additional_Inventor__c idInventor : additionalInventors) {
            if (idInventor.First_Named_Inventor__c
                    && idfsWithPrimaryInventor.contains(idInventor.SymphonyIPM__Invention_Disclosure_New__c)
                    && (oldMap == null ||
                    (oldMap != null
                    && oldMap.get(idInventor.Id)?.First_Named_Inventor__c != true))) {
                idInventor.addError('First_Named_Inventor__c', 'Primary Inventor already exists for current disclosure record.');
            }
        }
    }

    public static void afterHandler(List<SymphonyIPM__Additional_Inventor__c> additionalInventors, Map<Id, SymphonyIPM__Additional_Inventor__c> oldMap) {
        Map<Id, SymphonyIPM__Additional_Inventor__c> idInventorsMap = new Map<Id, SymphonyIPM__Additional_Inventor__c>([SELECT Id, SymphonyIPM__Inventor__c, SymphonyIPM__Invention_Disclosure_New__c FROM SymphonyIPM__Additional_Inventor__c WHERE Id IN :Trigger.newMap.keySet()]);
        Map<Id, SymphonyIPM__Additional_Inventor__c> inventorsChecked = new Map<Id, SymphonyIPM__Additional_Inventor__c>();
        Set<Id> inventionDisclosureIdsUnchecked = new Set<Id>();
        for (SymphonyIPM__Additional_Inventor__c idInventor : additionalInventors) {
            if (idInventor.First_Named_Inventor__c && (Trigger.isInsert || !oldMap.get(idInventor.Id).First_Named_Inventor__c)) {
                inventorsChecked.put(idInventorsMap.get(idInventor.Id).SymphonyIPM__Invention_Disclosure_New__c, idInventorsMap.get(idInventor.Id));
            } else if (!idInventor.First_Named_Inventor__c && Trigger.isUpdate && oldMap.get(idInventor.Id).First_Named_Inventor__c) {
                inventionDisclosureIdsUnchecked.add(idInventorsMap.get(idInventor.Id).SymphonyIPM__Invention_Disclosure_New__c);
            }
        }
        List<SymphonyIPM__Invention_Disclosure_New__c> idfsToUpdateUnchecked = [SELECT Id FROM SymphonyIPM__Invention_Disclosure_New__c WHERE Id IN :inventionDisclosureIdsUnchecked];
        for (SymphonyIPM__Invention_Disclosure_New__c idf : idfsToUpdateUnchecked) {
            idf.SymphonyIPM__Primary_Inventor__c = null;
        }
        if (!idfsToUpdateUnchecked.isEmpty()) {
            update idfsToUpdateUnchecked;
        }

        List<SymphonyIPM__Invention_Disclosure_New__c> idfsToUpdateChecked = [SELECT Id FROM SymphonyIPM__Invention_Disclosure_New__c WHERE Id IN :inventorsChecked.keySet()];
        for (SymphonyIPM__Invention_Disclosure_New__c idf : idfsToUpdateChecked) {
            idf.SymphonyIPM__Primary_Inventor__c = inventorsChecked.get(idf.Id).SymphonyIPM__Inventor__c;
        }

        if (!idfsToUpdateChecked.isEmpty()) {
            update idfsToUpdateChecked;
        }
    }

    public static void magicMethod(){
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;

    }
}