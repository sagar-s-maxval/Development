/*-----------------
 * Developer - Devendar Gone
 * Description - Copy Attachments from EmailMessage record to Docketing Activity record on Change of Email Tracker fild of Docketing Activity Object
 * Objects - SymphonyIPM__Docketing_Activity_v2__c, EmailMessage
 */
trigger trgCopyEmailMessageAttachtoDA on SymphonyIPM__Docketing_Activity_v2__c (after insert, after update) {

    List<SymphonyIPM__Docketing_Activity_v2__c> dActivities = [SELECT Id, Name, Email_Tracker_Created_From__r.Email_Message_Id__c FROM SymphonyIPM__Docketing_Activity_v2__c WHERE Id IN :Trigger.New];
    //Map —> Attachment Id – ContentVersion  
    Map<Id,ContentVersion> attachmentCVs = new Map<Id,ContentVersion>();
    //to map Attachment Id with ContentVersion record
    Map<Id,Id> attachmentEMs = new Map<Id,Id>();
    //Map ---> EmailMessage - DA Id 
    Map<Id,Id> emailMessageDA = new Map<Id,Id>();    
    
    if( Trigger.isInsert )
    {   
        for (SymphonyIPM__Docketing_Activity_v2__c dActivity: dActivities) {
            if(dActivity.Email_Tracker_Created_From__c != null)   
            {
                for(Attachment emAttachment: [SELECT Body, Id, Name FROM Attachment WHERE ParentId =:dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c])
                {
                    System.debug('EmailMessage'+dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c);
                    ContentVersion cv = new ContentVersion();                    
                    cv.PathOnClient = emAttachment.Name;
                    cv.Title = emAttachment.Name;
                    cv.VersionData = emAttachment.Body;
                    
                    attachmentCVs.put(emAttachment.Id,cv);
                    attachmentEMs.put(emAttachment.Id,dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c);
                    emailMessageDA.put(dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c,dActivity.Id);
                }
            }
        }
    }
    else if ( Trigger.isUpdate )
    {
        system.debug('in after update');         
        for (SymphonyIPM__Docketing_Activity_v2__c dActivity: dActivities) {
            SymphonyIPM__Docketing_Activity_v2__c oldAccount = Trigger.oldMap.get(dActivity.ID);
            
            if(dActivity.Email_Tracker_Created_From__c != oldAccount.Email_Tracker_Created_From__c)   
            {
                System.debug('Email Tracker Id'+dActivity.Email_Tracker_Created_From__c);
                for(Attachment emAttachment: [SELECT Body, Id, Name FROM Attachment WHERE ParentId =:dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c])
                {
                    System.debug('EmailMessage'+dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c);
                    ContentVersion cv = new ContentVersion();                    
                    cv.PathOnClient = emAttachment.Name;
                    cv.Title = emAttachment.Name;
                    cv.VersionData = emAttachment.Body;
                    
                    attachmentCVs.put(emAttachment.Id,cv);
                    attachmentEMs.put(emAttachment.Id,dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c);
                    emailMessageDA.put(dActivity.Email_Tracker_Created_From__r.Email_Message_Id__c,dActivity.Id);
                }
            }
        }
    }
    
    //Insert the content versions from attachment data
    if(attachmentCVs.values().size() > 0 ) {
        insert attachmentCVs.values();
        
        
        //to map ContentVersionId with DocketActivity Id for ContentDocument Linking
        map<Id,Id> cvToDAIdMap = new map<Id,Id>();
        
        List<Id> cvIds = new List<Id>();
        for(Id key : attachmentCVs.keySet()){
            ContentVersion cv = attachmentCVs.get(key);
            Id eMessage = attachmentEMs.get(key);
            Id dockettActivty =   emailMessageDA.get(eMessage);
            cvToDAIdMap.put(cv.Id,dockettActivty);
            cvIds.add(cv.Id);
            System.debug('cvIds'+cvIds);
        }
        
        //to link the files (versions) to its parent records.
        List<ContentDocumentLink> contentDocumentLinks = new List<ContentDocumentLink>();
        for (ContentVersion cv : [select Id,ContentDocumentId from ContentVersion where Id IN :cvIds]) {
            Id dAId = cvToDAIdMap.get(cv.Id);
            ContentDocumentLink cl = new ContentDocumentLink(LinkedEntityId = dAId, ContentDocumentId = cv.ContentDocumentId, ShareType = 'V');
            ContentDocumentLinks.add(cl);
        }
        
        if(contentDocumentLinks.size() > 0){
            insert contentDocumentLinks;
        }
    }


    Integer i = 0;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    System.debug('log');
    System.assert(true);
}